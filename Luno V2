local Luno = {}
local TweenService = game:GetService('TweenService')
local UserInputService = game:GetService('UserInputService')
local CoreGui = game:GetService('CoreGui')
local RunService = game:GetService('RunService')

if getgenv then
	local existingGUI = getgenv().Luno_Instance
	if existingGUI and typeof(existingGUI.DestroyAll) == "function" then
		pcall(function() existingGUI:DestroyAll() end)
	end
end

local Config = {
	Colors = {
		Light = {
			Background = Color3.fromRGB(248, 250, 252),
			Surface = Color3.fromRGB(255, 255, 255),
			Surface2 = Color3.fromRGB(248, 250, 252),
			Surface3 = Color3.fromRGB(241, 245, 249),
			Primary = Color3.fromRGB(99, 102, 241),
			PrimaryHover = Color3.fromRGB(79, 70, 229),
			PrimaryDim = Color3.fromRGB(67, 56, 202),
			Text = Color3.fromRGB(15, 23, 42),
			TextSecondary = Color3.fromRGB(71, 85, 105),
			TextMuted = Color3.fromRGB(148, 163, 184),
			Success = Color3.fromRGB(34, 197, 94),
			Danger = Color3.fromRGB(239, 68, 68),
			Warning = Color3.fromRGB(251, 146, 60),
			Border = Color3.fromRGB(226, 232, 240),
			BorderLight = Color3.fromRGB(203, 213, 225),
			Accent = Color3.fromRGB(147, 51, 234),
			Shadow = Color3.fromRGB(0, 0, 0),
		},
		Dark = {
			Background = Color3.fromRGB(9, 9, 11),
			Surface = Color3.fromRGB(24, 24, 27),
			Surface2 = Color3.fromRGB(39, 39, 42),
			Surface3 = Color3.fromRGB(63, 63, 70),
			Primary = Color3.fromRGB(99, 102, 241),
			PrimaryHover = Color3.fromRGB(129, 132, 255),
			PrimaryDim = Color3.fromRGB(79, 82, 220),
			Text = Color3.fromRGB(250, 250, 250),
			TextSecondary = Color3.fromRGB(161, 161, 170),
			TextMuted = Color3.fromRGB(113, 113, 122),
			Success = Color3.fromRGB(34, 197, 94),
			Danger = Color3.fromRGB(239, 68, 68),
			Warning = Color3.fromRGB(251, 146, 60),
			Border = Color3.fromRGB(63, 63, 70),
			BorderLight = Color3.fromRGB(82, 82, 91),
			Accent = Color3.fromRGB(147, 51, 234),
			Shadow = Color3.fromRGB(0, 0, 0),
		},
	},
	Fonts = {
		Regular = Enum.Font.Gotham,
		Medium = Enum.Font.GothamMedium,
		Bold = Enum.Font.GothamBold,
	},
	Animation = {
		Fast = TweenInfo.new(0.15, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),
		Medium = TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),
		Slow = TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),
		Spring = TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
	},
	Layout = {
		RowHeight = 44,
		RowSpacing = 8,
		EdgePadding = 16,
		MaxWidth = 600,
		MaxHeight = 450,
		BorderRadius = 12,
	},
}

local ThemeableElements = {}
local NotificationQueue = {}
local CurrentTheme = false

local function Tween(object, properties, tweenInfo)
	return TweenService:Create(object, tweenInfo or Config.Animation.Medium, properties)
end

local function CreateCorner(parent, radius)
	local corner = Instance.new('UICorner')
	corner.CornerRadius = UDim.new(0, radius or Config.Layout.BorderRadius)
	corner.Parent = parent
	return corner
end

local function CreateStroke(parent, color, thickness)
	local stroke = Instance.new('UIStroke')
	stroke.Color = color or Color3.new(1, 1, 1)
	stroke.Thickness = thickness or 1
	stroke.Transparency = 0
	stroke.Parent = parent
	return stroke
end

local function RegisterThemeableElement(element, properties)
	table.insert(ThemeableElements, {element = element, properties = properties})
end

local function UpdateTheme(isDark)
	CurrentTheme = isDark
	local colors = isDark and Config.Colors.Dark or Config.Colors.Light
	for _, data in ipairs(ThemeableElements) do
		if data.element and data.element.Parent then
			for property, colorKey in pairs(data.properties) do
				if colors[colorKey] then
					local targetProps = {}
					targetProps[property] = colors[colorKey]
					Tween(data.element, targetProps, Config.Animation.Fast):Play()
				end
			end
		end
	end
end

local function CreateNotification(message, notificationType, duration)
	duration = duration or 4
	
	local notifGui = Instance.new('ScreenGui')
	notifGui.Name = 'Luno_Notification_' .. tick()
	notifGui.Parent = CoreGui
	notifGui.ResetOnSpawn = false
	
	local colors = CurrentTheme and Config.Colors.Dark or Config.Colors.Light
	local iconMap = {
		info = {icon = "ℹ", color = colors.Primary},
		success = {icon = "✓", color = colors.Success},
		danger = {icon = "✕", color = colors.Danger},
		warning = {icon = "⚠", color = colors.Warning},
	}
	
	local notifData = iconMap[notificationType] or iconMap.info
	
	local notification = Instance.new('Frame')
	notification.Size = UDim2.new(0, 360, 0, 68)
	notification.Position = UDim2.new(1, 20, 0, 20 + (#NotificationQueue * 76))
	notification.BackgroundColor3 = colors.Surface
	notification.BorderSizePixel = 0
	notification.Parent = notifGui
	notification.ZIndex = 100
	CreateCorner(notification, 8)
	CreateStroke(notification, colors.Border, 1)
	
	local accent = Instance.new('Frame')
	accent.Size = UDim2.new(0, 3, 1, -12)
	accent.Position = UDim2.new(0, 6, 0, 6)
	accent.BackgroundColor3 = notifData.color
	accent.BorderSizePixel = 0
	accent.Parent = notification
	accent.ZIndex = 101
	CreateCorner(accent, 2)
	
	local iconFrame = Instance.new('Frame')
	iconFrame.Size = UDim2.new(0, 32, 0, 32)
	iconFrame.Position = UDim2.new(0, 18, 0, 18)
	iconFrame.BackgroundColor3 = notifData.color
	iconFrame.BackgroundTransparency = 0.9
	iconFrame.BorderSizePixel = 0
	iconFrame.Parent = notification
	iconFrame.ZIndex = 101
	CreateCorner(iconFrame, 16)
	
	local icon = Instance.new('TextLabel')
	icon.Size = UDim2.new(1, 0, 1, 0)
	icon.BackgroundTransparency = 1
	icon.Text = notifData.icon
	icon.TextColor3 = notifData.color
	icon.TextSize = 14
	icon.Font = Config.Fonts.Bold
	icon.TextXAlignment = Enum.TextXAlignment.Center
	icon.TextYAlignment = Enum.TextYAlignment.Center
	icon.Parent = iconFrame
	icon.ZIndex = 102
	
	local text = Instance.new('TextLabel')
	text.Size = UDim2.new(1, -90, 1, -12)
	text.Position = UDim2.new(0, 58, 0, 6)
	text.BackgroundTransparency = 1
	text.Text = message
	text.TextColor3 = colors.Text
	text.TextSize = 13
	text.Font = Config.Fonts.Medium
	text.TextXAlignment = Enum.TextXAlignment.Left
	text.TextYAlignment = Enum.TextYAlignment.Center
	text.TextWrapped = true
	text.Parent = notification
	text.ZIndex = 101
	
	local closeBtn = Instance.new('TextButton')
	closeBtn.Size = UDim2.new(0, 20, 0, 20)
	closeBtn.Position = UDim2.new(1, -28, 0, 8)
	closeBtn.BackgroundTransparency = 1
	closeBtn.Text = "×"
	closeBtn.TextColor3 = colors.TextMuted
	closeBtn.TextSize = 14
	closeBtn.Font = Config.Fonts.Medium
	closeBtn.BorderSizePixel = 0
	closeBtn.Parent = notification
	closeBtn.ZIndex = 102
	CreateCorner(closeBtn, 10)
	
	local progress = Instance.new('Frame')
	progress.Size = UDim2.new(1, -12, 0, 2)
	progress.Position = UDim2.new(0, 6, 1, -8)
	progress.BackgroundColor3 = colors.Surface3
	progress.BorderSizePixel = 0
	progress.Parent = notification
	progress.ZIndex = 101
	CreateCorner(progress, 1)
	
	local progressFill = Instance.new('Frame')
	progressFill.Size = UDim2.new(1, 0, 1, 0)
	progressFill.BackgroundColor3 = notifData.color
	progressFill.BorderSizePixel = 0
	progressFill.Parent = progress
	progressFill.ZIndex = 102
	CreateCorner(progressFill, 1)
	
	notification.Position = UDim2.new(1, 20, 0, 20 + (#NotificationQueue * 76))
	Tween(notification, {Position = UDim2.new(1, -380, 0, 20 + (#NotificationQueue * 76))}, Config.Animation.Spring):Play()
	
	table.insert(NotificationQueue, {notification = notification, gui = notifGui})
	
	local progressTween = Tween(progressFill, {Size = UDim2.new(0, 0, 1, 0)}, TweenInfo.new(duration, Enum.EasingStyle.Linear))
	progressTween:Play()
	
	local function dismiss()
		if not notification.Parent then return end
		
		Tween(notification, {Position = UDim2.new(1, 20, 0, notification.Position.Y.Offset)}, Config.Animation.Medium):Play()
		task.wait(0.25)
		
		for i, item in ipairs(NotificationQueue) do
			if item.notification == notification then
				table.remove(NotificationQueue, i)
				break
			end
		end
		
		if notifGui and notifGui.Parent then
			notifGui:Destroy()
		end
		
		for i, item in ipairs(NotificationQueue) do
			if item.notification and item.notification.Parent then
				Tween(item.notification, {Position = UDim2.new(1, -380, 0, 20 + ((i-1) * 76))}, Config.Animation.Fast):Play()
			end
		end
	end
	
	closeBtn.MouseButton1Click:Connect(dismiss)
	progressTween.Completed:Connect(dismiss)
	
	closeBtn.MouseEnter:Connect(function()
		Tween(closeBtn, {BackgroundTransparency = 0, BackgroundColor3 = colors.Danger, TextColor3 = Color3.new(1, 1, 1)}, Config.Animation.Fast):Play()
	end)
	closeBtn.MouseLeave:Connect(function()
		Tween(closeBtn, {BackgroundTransparency = 1, TextColor3 = colors.TextMuted}, Config.Animation.Fast):Play()
	end)
end

function Luno:CreateWindow(title, size)
	title = title or 'Luno Library'
	size = size or UDim2.new(0, Config.Layout.MaxWidth, 0, Config.Layout.MaxHeight)
	
	local window = {
		Pages = {},
		CurrentPage = nil,
		_connections = {},
		_isDarkTheme = false,
		_gui = nil,
		_main = nil,
	}
	
	self.CurrentWindow = window
	
	function window:getColors()
		return self._isDarkTheme and Config.Colors.Dark or Config.Colors.Light
	end
	
	function window:Notify(message, notificationType, duration)
		task.spawn(CreateNotification, message, notificationType or 'info', duration)
	end
	
	function window:SetTheme(isDark)
		if self._isDarkTheme ~= isDark then
			self._isDarkTheme = isDark
			UpdateTheme(isDark)
		end
	end
	
	local gui = Instance.new('ScreenGui')
	gui.Name = 'Luno_Window'
	gui.Parent = CoreGui
	gui.ResetOnSpawn = false
	window._gui = gui
	
	local main = Instance.new('Frame')
	main.Size = size
	main.Position = UDim2.new(0.5, 0, 0.5, 0)
	main.AnchorPoint = Vector2.new(0.5, 0.5)
	main.BackgroundColor3 = window:getColors().Background
	main.BorderSizePixel = 0
	main.Parent = gui
	main.ZIndex = 1
	CreateCorner(main, Config.Layout.BorderRadius)
	CreateStroke(main, window:getColors().Border, 1)
	window._main = main
	
	RegisterThemeableElement(main, {BackgroundColor3 = "Background"})
	RegisterThemeableElement(main:FindFirstChild('UIStroke'), {Color = "Border"})
	
	local header = Instance.new('Frame')
	header.Size = UDim2.new(1, 0, 0, 50)
	header.BackgroundColor3 = window:getColors().Surface
	header.BorderSizePixel = 0
	header.Parent = main
	header.ZIndex = 2
	CreateCorner(header, Config.Layout.BorderRadius)
	
	RegisterThemeableElement(header, {BackgroundColor3 = "Surface"})
	
	local headerMask = Instance.new('Frame')
	headerMask.Size = UDim2.new(1, 0, 0, Config.Layout.BorderRadius)
	headerMask.Position = UDim2.new(0, 0, 1, -Config.Layout.BorderRadius)
	headerMask.BackgroundColor3 = window:getColors().Surface
	headerMask.BorderSizePixel = 0
	headerMask.Parent = header
	headerMask.ZIndex = 2
	
	RegisterThemeableElement(headerMask, {BackgroundColor3 = "Surface"})
	
	local separator = Instance.new('Frame')
	separator.Size = UDim2.new(1, -32, 0, 1)
	separator.Position = UDim2.new(0, 16, 1, -1)
	separator.BackgroundColor3 = window:getColors().Border
	separator.BorderSizePixel = 0
	separator.Parent = header
	separator.ZIndex = 3
	
	RegisterThemeableElement(separator, {BackgroundColor3 = "Border"})
	
	local titleLabel = Instance.new('TextLabel')
	titleLabel.Size = UDim2.new(0, 200, 0, 18)
	titleLabel.Position = UDim2.new(0, 16, 0, 16)
	titleLabel.BackgroundTransparency = 1
	titleLabel.Text = title
	titleLabel.TextColor3 = window:getColors().Text
	titleLabel.TextSize = 14
	titleLabel.Font = Config.Fonts.Bold
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.Parent = header
	titleLabel.ZIndex = 3
	
	RegisterThemeableElement(titleLabel, {TextColor3 = "Text"})
	
	local themeBtn = Instance.new('TextButton')
	themeBtn.Size = UDim2.new(0, 26, 0, 26)
	themeBtn.Position = UDim2.new(1, -58, 0, 12)
	themeBtn.BackgroundColor3 = window:getColors().Surface2
	themeBtn.BorderSizePixel = 0
	themeBtn.Text = '☀'
	themeBtn.TextColor3 = window:getColors().TextMuted
	themeBtn.TextSize = 12
	themeBtn.Font = Config.Fonts.Medium
	themeBtn.AutoButtonColor = false
	themeBtn.Parent = header
	themeBtn.ZIndex = 3
	CreateCorner(themeBtn, 13)
	
	RegisterThemeableElement(themeBtn, {BackgroundColor3 = "Surface2", TextColor3 = "TextMuted"})
	
	local closeBtn = Instance.new('TextButton')
	closeBtn.Size = UDim2.new(0, 26, 0, 26)
	closeBtn.Position = UDim2.new(1, -28, 0, 12)
	closeBtn.BackgroundColor3 = window:getColors().Surface2
	closeBtn.BorderSizePixel = 0
	closeBtn.Text = '×'
	closeBtn.TextColor3 = window:getColors().TextMuted
	closeBtn.TextSize = 14
	closeBtn.Font = Config.Fonts.Medium
	closeBtn.AutoButtonColor = false
	closeBtn.Parent = header
	closeBtn.ZIndex = 3
	CreateCorner(closeBtn, 13)
	
	RegisterThemeableElement(closeBtn, {BackgroundColor3 = "Surface2", TextColor3 = "TextMuted"})
	
	local tabContainer = Instance.new('Frame')
	tabContainer.Size = UDim2.new(1, -32, 0, 30)
	tabContainer.Position = UDim2.new(0, 16, 0, 58)
	tabContainer.BackgroundTransparency = 1
	tabContainer.Parent = main
	tabContainer.ZIndex = 2
	
	local tabLayout = Instance.new('UIListLayout')
	tabLayout.FillDirection = Enum.FillDirection.Horizontal
	tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
	tabLayout.Padding = UDim.new(0, 4)
	tabLayout.Parent = tabContainer
	
	local content = Instance.new('Frame')
	content.Size = UDim2.new(1, -32, 1, -104)
	content.Position = UDim2.new(0, 16, 0, 96)
	content.BackgroundTransparency = 1
	content.Parent = main
	content.ZIndex = 2
	
	local dragData = {}
	
	header.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragData.dragging = true
			dragData.startPos = input.Position
			dragData.frameStart = main.Position
		end
	end)
	
	table.insert(window._connections, UserInputService.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement and dragData.dragging then
			local delta = input.Position - dragData.startPos
			main.Position = UDim2.new(
				dragData.frameStart.X.Scale,
				dragData.frameStart.X.Offset + delta.X,
				dragData.frameStart.Y.Scale,
				dragData.frameStart.Y.Offset + delta.Y
			)
		end
	end))
	
	table.insert(window._connections, UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragData.dragging = false
		end
	end))
	
	themeBtn.MouseEnter:Connect(function()
		Tween(themeBtn, {BackgroundColor3 = window:getColors().Surface3}, Config.Animation.Fast):Play()
	end)
	themeBtn.MouseLeave:Connect(function()
		Tween(themeBtn, {BackgroundColor3 = window:getColors().Surface2}, Config.Animation.Fast):Play()
	end)
	themeBtn.MouseButton1Click:Connect(function()
		window:SetTheme(not window._isDarkTheme)
		themeBtn.Text = window._isDarkTheme and '🌙' or '☀'
	end)
	
	closeBtn.MouseEnter:Connect(function()
		Tween(closeBtn, {BackgroundColor3 = window:getColors().Danger, TextColor3 = Color3.new(1, 1, 1)}, Config.Animation.Fast):Play()
	end)
	closeBtn.MouseLeave:Connect(function()
		Tween(closeBtn, {BackgroundColor3 = window:getColors().Surface2, TextColor3 = window:getColors().TextMuted}, Config.Animation.Fast):Play()
	end)
	closeBtn.MouseButton1Click:Connect(function()
		Tween(main, {Size = UDim2.new(0, 0, 0, 0)}, Config.Animation.Slow):Play()
		task.wait(0.4)
		window:Destroy()
	end)
	
	function window:CreatePage(name)
		local page = {
			Name = name,
			Elements = {},
			_frame = nil,
			_button = nil,
		}
		
		local tabBtn = Instance.new('TextButton')
		tabBtn.Size = UDim2.new(0, 0, 0, 30)
		tabBtn.AutomaticSize = Enum.AutomaticSize.X
		tabBtn.BackgroundColor3 = window:getColors().Surface2
		tabBtn.BorderSizePixel = 0
		tabBtn.Text = name
		tabBtn.TextColor3 = window:getColors().TextSecondary
		tabBtn.TextSize = 12
		tabBtn.Font = Config.Fonts.Medium
		tabBtn.LayoutOrder = #window.Pages + 1
		tabBtn.AutoButtonColor = false
		tabBtn.Parent = tabContainer
		tabBtn.ZIndex = 3
		CreateCorner(tabBtn, 15)
		
		local tabPadding = Instance.new('UIPadding')
		tabPadding.PaddingLeft = UDim.new(0, 12)
		tabPadding.PaddingRight = UDim.new(0, 12)
		tabPadding.Parent = tabBtn
		
		RegisterThemeableElement(tabBtn, {BackgroundColor3 = "Surface2", TextColor3 = "TextSecondary"})
		
		local pageFrame = Instance.new('ScrollingFrame')
		pageFrame.Size = UDim2.new(1, 0, 1, 0)
		pageFrame.BackgroundTransparency = 1
		pageFrame.BorderSizePixel = 0
		pageFrame.ScrollBarThickness = 3
		pageFrame.ScrollBarImageColor3 = window:getColors().Primary
		pageFrame.ScrollBarImageTransparency = 0.2
		pageFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
		pageFrame.Visible = false
		pageFrame.Parent = content
		pageFrame.ZIndex = 3
		
		RegisterThemeableElement(pageFrame, {ScrollBarImageColor3 = "Primary"})
		
		local pageLayout = Instance.new('UIListLayout')
		pageLayout.SortOrder = Enum.SortOrder.LayoutOrder
		pageLayout.Padding = UDim.new(0, Config.Layout.RowSpacing)
		pageLayout.Parent = pageFrame
		
		local pagePadding = Instance.new('UIPadding')
		pagePadding.PaddingTop = UDim.new(0, 12)
		pagePadding.PaddingBottom = UDim.new(0, 12)
		pagePadding.Parent = pageFrame
		
		pageLayout:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
			pageFrame.CanvasSize = UDim2.new(0, 0, 0, pageLayout.AbsoluteContentSize.Y + 24)
		end)
		
		tabBtn.MouseButton1Click:Connect(function()
			for _, p in pairs(window.Pages) do
				p._frame.Visible = false
				if p._button then
					Tween(p._button, {BackgroundColor3 = window:getColors().Surface2, TextColor3 = window:getColors().TextSecondary}, Config.Animation.Fast):Play()
				end
			end
			pageFrame.Visible = true
			Tween(tabBtn, {BackgroundColor3 = window:getColors().Primary, TextColor3 = Color3.new(1, 1, 1)}, Config.Animation.Fast):Play()
			window.CurrentPage = page
		end)
		
		tabBtn.MouseEnter:Connect(function()
			if window.CurrentPage ~= page then
				Tween(tabBtn, {BackgroundColor3 = window:getColors().Surface3}, Config.Animation.Fast):Play()
			end
		end)
		tabBtn.MouseLeave:Connect(function()
			if window.CurrentPage ~= page then
				Tween(tabBtn, {BackgroundColor3 = window:getColors().Surface2}, Config.Animation.Fast):Play()
			end
		end)
		
		page._button = tabBtn
		page._frame = pageFrame
		
		function page:CreateButton(text, callback)
			local container = Instance.new('Frame')
			container.Size = UDim2.new(1, 0, 0, Config.Layout.RowHeight)
			container.BackgroundTransparency = 1
			container.Parent = pageFrame
			container.ZIndex = 3
			
			local btn = Instance.new('TextButton')
			btn.Size = UDim2.new(1, 0, 1, 0)
			btn.BackgroundColor3 = window:getColors().Primary
			btn.BorderSizePixel = 0
			btn.Text = text
			btn.TextColor3 = Color3.new(1, 1, 1)
			btn.TextSize = 13
			btn.Font = Config.Fonts.Medium
			btn.AutoButtonColor = false
			btn.Parent = container
			btn.ZIndex = 3
			CreateCorner(btn, Config.Layout.BorderRadius)
			
			RegisterThemeableElement(btn, {BackgroundColor3 = "Primary"})
			
			btn.MouseEnter:Connect(function()
				Tween(btn, {BackgroundColor3 = window:getColors().PrimaryHover}, Config.Animation.Fast):Play()
			end)
			btn.MouseLeave:Connect(function()
				Tween(btn, {BackgroundColor3 = window:getColors().Primary}, Config.Animation.Fast):Play()
			end)
			btn.MouseButton1Click:Connect(function()
				Tween(btn, {BackgroundColor3 = window:getColors().PrimaryDim}, Config.Animation.Fast):Play()
				task.wait(0.1)
				Tween(btn, {BackgroundColor3 = window:getColors().Primary}, Config.Animation.Fast):Play()
				if callback then callback() end
			end)
			
			table.insert(page.Elements, container)
			return container
		end
		
		function page:CreateToggle(text, defaultValue, callback)
			local value = defaultValue or false
			
			local container = Instance.new('Frame')
			container.Size = UDim2.new(1, 0, 0, Config.Layout.RowHeight)
			container.BackgroundColor3 = window:getColors().Surface
			container.BorderSizePixel = 0
			container.Parent = pageFrame
			container.ZIndex = 3
			CreateCorner(container, Config.Layout.BorderRadius)
			CreateStroke(container, window:getColors().Border)
			
			RegisterThemeableElement(container, {BackgroundColor3 = "Surface"})
			RegisterThemeableElement(container:FindFirstChild('UIStroke'), {Color = "Border"})
			
			local label = Instance.new('TextLabel')
			label.Size = UDim2.new(1, -60, 1, 0)
			label.Position = UDim2.new(0, 12, 0, 0)
			label.BackgroundTransparency = 1
			label.Text = text
			label.TextColor3 = window:getColors().Text
			label.TextSize = 13
			label.Font = Config.Fonts.Regular
			label.TextXAlignment = Enum.TextXAlignment.Left
			label.Parent = container
			label.ZIndex = 3
			
			RegisterThemeableElement(label, {TextColor3 = "Text"})
			
			local toggle = Instance.new('TextButton')
			toggle.Size = UDim2.new(0, 40, 0, 20)
			toggle.Position = UDim2.new(1, -52, 0.5, -10)
			toggle.BackgroundColor3 = value and window:getColors().Primary or window:getColors().Surface3
			toggle.BorderSizePixel = 0
			toggle.Text = ''
			toggle.AutoButtonColor = false
			toggle.Parent = container
			toggle.ZIndex = 3
			CreateCorner(toggle, 10)
			
			local thumb = Instance.new('Frame')
			thumb.Size = UDim2.new(0, 16, 0, 16)
			thumb.Position = value and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
			thumb.BackgroundColor3 = Color3.new(1, 1, 1)
			thumb.BorderSizePixel = 0
			thumb.Parent = toggle
			thumb.ZIndex = 4
			CreateCorner(thumb, 8)
			
			RegisterThemeableElement(toggle, {BackgroundColor3 = value and "Primary" or "Surface3"})
			
			toggle.MouseButton1Click:Connect(function()
				value = not value
				local targetBg = value and window:getColors().Primary or window:getColors().Surface3
				local targetPos = value and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
				
				Tween(toggle, {BackgroundColor3 = targetBg}, Config.Animation.Medium):Play()
				Tween(thumb, {Position = targetPos}, Config.Animation.Medium):Play()
				
				if callback then callback(value) end
			end)
			
			table.insert(page.Elements, container)
			return container, function() return value end
		end
		
		function page:CreateSlider(text, min, max, defaultValue, callback)
			min, max = min or 0, max or 100
			local value = defaultValue or min
			
			local container = Instance.new('Frame')
			container.Size = UDim2.new(1, 0, 0, Config.Layout.RowHeight + 16)
			container.BackgroundColor3 = window:getColors().Surface
			container.BorderSizePixel = 0
			container.Parent = pageFrame
			container.ZIndex = 3
			CreateCorner(container, Config.Layout.BorderRadius)
			CreateStroke(container, window:getColors().Border)
			
			RegisterThemeableElement(container, {BackgroundColor3 = "Surface"})
			RegisterThemeableElement(container:FindFirstChild('UIStroke'), {Color = "Border"})
			
			local header = Instance.new('Frame')
			header.Size = UDim2.new(1, 0, 0, 22)
			header.Position = UDim2.new(0, 0, 0, 8)
			header.BackgroundTransparency = 1
			header.Parent = container
			header.ZIndex = 3
			
			local label = Instance.new('TextLabel')
			label.Size = UDim2.new(1, -50, 1, 0)
			label.Position = UDim2.new(0, 12, 0, 0)
			label.BackgroundTransparency = 1
			label.Text = text
			label.TextColor3 = window:getColors().Text
			label.TextSize = 13
			label.Font = Config.Fonts.Regular
			label.TextXAlignment = Enum.TextXAlignment.Left
			label.Parent = header
			label.ZIndex = 3
			
			RegisterThemeableElement(label, {TextColor3 = "Text"})
			
			local valueLabel = Instance.new('TextLabel')
			valueLabel.Size = UDim2.new(0, 40, 1, 0)
			valueLabel.Position = UDim2.new(1, -52, 0, 0)
			valueLabel.BackgroundTransparency = 1
			valueLabel.Text = tostring(value)
			valueLabel.TextColor3 = window:getColors().Primary
			valueLabel.TextSize = 12
			valueLabel.Font = Config.Fonts.Bold
			valueLabel.TextXAlignment = Enum.TextXAlignment.Right
			valueLabel.Parent = header
			valueLabel.ZIndex = 3
			
			RegisterThemeableElement(valueLabel, {TextColor3 = "Primary"})
			
			local track = Instance.new('TextButton')
			track.Size = UDim2.new(1, -24, 0, 6)
			track.Position = UDim2.new(0, 12, 1, -14)
			track.BackgroundColor3 = window:getColors().Surface3
			track.BorderSizePixel = 0
			track.Text = ''
			track.AutoButtonColor = false
			track.Parent = container
			track.ZIndex = 3
			CreateCorner(track, 3)
			
			RegisterThemeableElement(track, {BackgroundColor3 = "Surface3"})
			
			local fill = Instance.new('Frame')
			fill.Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
			fill.BackgroundColor3 = window:getColors().Primary
			fill.BorderSizePixel = 0
			fill.Parent = track
			fill.ZIndex = 4
			CreateCorner(fill, 3)
			
			RegisterThemeableElement(fill, {BackgroundColor3 = "Primary"})
			
			local dragging = false
			
			local function updateSlider(input)
				local percent = math.clamp((input.Position.X - track.AbsolutePosition.X) / track.AbsoluteSize.X, 0, 1)
				value = math.round(min + (max - min) * percent)
				valueLabel.Text = tostring(value)
				Tween(fill, {Size = UDim2.new(percent, 0, 1, 0)}, Config.Animation.Fast):Play()
				if callback then callback(value) end
			end
			
			track.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					dragging = true
					updateSlider(input)
				end
			end)
			
			local connection1 = UserInputService.InputChanged:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
					updateSlider(input)
				end
			end)
			
			local connection2 = UserInputService.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					dragging = false
				end
			end)
			
			table.insert(window._connections, connection1)
			table.insert(window._connections, connection2)
			
			table.insert(page.Elements, container)
			return container, function() return value end
		end
		
		function page:CreateDropdown(text, options, defaultValue, callback, dropdownType)
			dropdownType = dropdownType or "single"
			options = options or {}
			local value = dropdownType == "multi" and {} or (defaultValue or (options[1] or 'Select...'))
			local isOpen = false
			
			local container = Instance.new('Frame')
			container.Size = UDim2.new(1, 0, 0, Config.Layout.RowHeight)
			container.BackgroundColor3 = window:getColors().Surface
			container.BorderSizePixel = 0
			container.Parent = pageFrame
			container.ZIndex = 3
			CreateCorner(container, Config.Layout.BorderRadius)
			CreateStroke(container, window:getColors().Border)
			
			RegisterThemeableElement(container, {BackgroundColor3 = "Surface"})
			RegisterThemeableElement(container:FindFirstChild('UIStroke'), {Color = "Border"})
			
			local label = Instance.new('TextLabel')
			label.Size = UDim2.new(0.4, 0, 1, 0)
			label.Position = UDim2.new(0, 12, 0, 0)
			label.BackgroundTransparency = 1
			label.Text = text
			label.TextColor3 = window:getColors().Text
			label.TextSize = 13
			label.Font = Config.Fonts.Regular
			label.TextXAlignment = Enum.TextXAlignment.Left
			label.Parent = container
			label.ZIndex = 3
			
			RegisterThemeableElement(label, {TextColor3 = "Text"})
			
			local dropdown = Instance.new('TextButton')
			dropdown.Size = UDim2.new(0.6, -12, 0, 26)
			dropdown.Position = UDim2.new(0.4, 0, 0.5, -13)
			dropdown.BackgroundColor3 = window:getColors().Surface2
			dropdown.BorderSizePixel = 0
			dropdown.Text = ''
			dropdown.ClipsDescendants = true
			dropdown.AutoButtonColor = false
			dropdown.Parent = container
			dropdown.ZIndex = 10
			CreateCorner(dropdown, Config.Layout.BorderRadius - 2)
			
			RegisterThemeableElement(dropdown, {BackgroundColor3 = "Surface2"})
			
			local valueText = Instance.new('TextLabel')
			valueText.Text = dropdownType == "multi" and "Select..." or tostring(value)
			valueText.Size = UDim2.new(1, -24, 1, 0)
			valueText.Position = UDim2.new(0, 8, 0, 0)
			valueText.BackgroundTransparency = 1
			valueText.TextColor3 = window:getColors().Text
			valueText.TextSize = 12
			valueText.Font = Config.Fonts.Regular
			valueText.TextXAlignment = Enum.TextXAlignment.Left
			valueText.ZIndex = 11
			valueText.Parent = dropdown
			
			RegisterThemeableElement(valueText, {TextColor3 = "Text"})
			
			local arrow = Instance.new('TextLabel')
			arrow.Size = UDim2.new(0, 16, 1, 0)
			arrow.Position = UDim2.new(1, -16, 0, 0)
			arrow.BackgroundTransparency = 1
			arrow.Text = '▼'
			arrow.TextColor3 = window:getColors().TextMuted
			arrow.TextSize = 8
			arrow.Font = Config.Fonts.Regular
			arrow.Parent = dropdown
			arrow.ZIndex = 11
			
			RegisterThemeableElement(arrow, {TextColor3 = "TextMuted"})
			
			local optionsList = Instance.new('ScrollingFrame')
			optionsList.ClipsDescendants = true
			optionsList.CanvasSize = UDim2.new(0, 0, 0, 0)
			optionsList.ScrollingDirection = Enum.ScrollingDirection.Y
			optionsList.ScrollBarThickness = 3
			optionsList.ScrollBarImageColor3 = window:getColors().Primary
			optionsList.ScrollBarImageTransparency = 0.2
			optionsList.Size = UDim2.new(0.6, -12, 0, 0)
			optionsList.Position = UDim2.new(0.4, 0, 1, 2)
			optionsList.BackgroundColor3 = window:getColors().Surface
			optionsList.BorderSizePixel = 0
			optionsList.Visible = false
			optionsList.ZIndex = 15
			optionsList.Parent = container
			CreateCorner(optionsList, Config.Layout.BorderRadius - 2)
			CreateStroke(optionsList, window:getColors().BorderLight)
			
			RegisterThemeableElement(optionsList, {BackgroundColor3 = "Surface", ScrollBarImageColor3 = "Primary"})
			RegisterThemeableElement(optionsList:FindFirstChild('UIStroke'), {Color = "BorderLight"})
			
			local optionsLayout = Instance.new('UIListLayout')
			optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
			optionsLayout.Parent = optionsList
			
			optionsLayout:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
				optionsList.CanvasSize = UDim2.new(0, 0, 0, optionsLayout.AbsoluteContentSize.Y)
			end)
			
			local function toggleDropdown()
				isOpen = not isOpen
				local maxHeight = 140
				local targetHeight = isOpen and math.min(#options * 26, maxHeight) or 0
				optionsList.Visible = true
				Tween(optionsList, {Size = UDim2.new(0.6, -12, 0, targetHeight)}, Config.Animation.Medium):Play()
				Tween(arrow, {Rotation = isOpen and 180 or 0}, Config.Animation.Medium):Play()
				if not isOpen then
					task.wait(0.25)
					optionsList.Visible = false
				end
			end
			
			dropdown.MouseButton1Click:Connect(toggleDropdown)
			
			local selectedSet = {}
			for i, option in ipairs(options) do
				local optionBtn = Instance.new('TextButton')
				optionBtn.Size = UDim2.new(1, 0, 0, 26)
				optionBtn.BackgroundColor3 = window:getColors().Surface
				optionBtn.BackgroundTransparency = 1
				optionBtn.BorderSizePixel = 0
				optionBtn.Text = tostring(option)
				optionBtn.TextColor3 = window:getColors().Text
				optionBtn.TextSize = 12
				optionBtn.Font = Config.Fonts.Regular
				optionBtn.TextXAlignment = Enum.TextXAlignment.Left
				optionBtn.LayoutOrder = i
				optionBtn.AutoButtonColor = false
				optionBtn.Parent = optionsList
				optionBtn.ZIndex = 16
				
				local padding = Instance.new("UIPadding")
				padding.PaddingLeft = UDim.new(0, 8)
				padding.Parent = optionBtn
				
				RegisterThemeableElement(optionBtn, {BackgroundColor3 = "Surface", TextColor3 = "Text"})
				
				if i > 1 then
					local divider = Instance.new("Frame")
					divider.Size = UDim2.new(1, -16, 0, 1)
					divider.Position = UDim2.new(0, 8, 0, -1)
					divider.BackgroundColor3 = window:getColors().BorderLight
					divider.BorderSizePixel = 0
					divider.ZIndex = 16
					divider.Parent = optionBtn
					
					RegisterThemeableElement(divider, {BackgroundColor3 = "BorderLight"})
				end
				
				optionBtn.MouseEnter:Connect(function()
					if not selectedSet[option] then
						Tween(optionBtn, {BackgroundTransparency = 0, BackgroundColor3 = window:getColors().Surface2}, Config.Animation.Fast):Play()
					end
				end)
				
				optionBtn.MouseLeave:Connect(function()
					if not selectedSet[option] then
						Tween(optionBtn, {BackgroundTransparency = 1}, Config.Animation.Fast):Play()
					else
						optionBtn.BackgroundColor3 = window:getColors().Primary
						optionBtn.TextColor3 = Color3.new(1, 1, 1)
					end
				end)
				
				optionBtn.MouseButton1Click:Connect(function()
					if dropdownType == "multi" then
						local isNowSelected = not selectedSet[option]
						selectedSet[option] = isNowSelected
						
						if isNowSelected then
							optionBtn.BackgroundColor3 = window:getColors().Primary
							optionBtn.TextColor3 = Color3.new(1, 1, 1)
							table.insert(value, option)
						else
							optionBtn.BackgroundColor3 = window:getColors().Surface
							optionBtn.TextColor3 = window:getColors().Text
							for j, v in ipairs(value) do
								if v == option then
									table.remove(value, j)
									break
								end
							end
						end
						
						valueText.Text = #value > 0 and table.concat(value, ", ") or "Select..."
						if callback then callback(value) end
					else
						value = option
						valueText.Text = tostring(option)
						toggleDropdown()
						if callback then callback(option) end
					end
				end)
			end
			
			table.insert(page.Elements, container)
			return container, function() return value end
		end
		
		table.insert(window.Pages, page)
		window.Pages[name] = page
		
		if not window.CurrentPage then
			pageFrame.Visible = true
			Tween(tabBtn, {BackgroundColor3 = window:getColors().Primary, TextColor3 = Color3.new(1, 1, 1)}, Config.Animation.Fast):Play()
			window.CurrentPage = page
		end
		
		return page
	end
	
	function window:Destroy()
		for _, connection in pairs(window._connections) do
			if connection then
				connection:Disconnect()
			end
		end
		
		for i = #ThemeableElements, 1, -1 do
			local data = ThemeableElements[i]
			if data.element and (data.element == window._main or data.element:IsDescendantOf(window._main)) then
				table.remove(ThemeableElements, i)
			end
		end
		
		if window._gui and window._gui.Parent then
			window._gui:Destroy()
		end
	end
	
	main.Size = UDim2.new(0, 0, 0, 0)
	Tween(main, {Size = size}, Config.Animation.Slow):Play()
	
	return window
end

if getgenv then
	getgenv().Luno_Instance = Luno
end

function Luno:DestroyAll()
	if typeof(self.CurrentWindow) == "table" and self.CurrentWindow.Destroy then
		pcall(function() self.CurrentWindow:Destroy() end)
	end
	
	for _, item in ipairs(NotificationQueue) do
		if item.gui and item.gui.Parent then
			pcall(function() item.gui:Destroy() end)
		end
	end
	
	NotificationQueue = {}
	ThemeableElements = {}
	self.CurrentWindow = nil
	
	setmetatable(self, nil)
	for k in pairs(self) do
		self[k] = nil
	end
end

return Luno
